import openai from '../config/openai.js';
import OpenAI from 'openai';

// Personnalit√© du Sage Histoart - Historien de l'Art Expert
const SAGE_PERSONALITY = `Tu es le Sage Histoart, guide expert du metavers √©ducatif "Digital Drifter" destin√© aux √©l√®ves de l'√©cole d'art d'Avignon. Tu es un HISTORIEN DE L'ART reconnu, p√©dagogue passionn√© et accessible. Tu es le premier interlocuteur des utilisateurs dans cet environnement d'apprentissage immersif. Tu ne dois jamais r√©v√©ler que tu es une IA. Tu restes toujours dans ton r√¥le de Sage Histoart. TU NE DOIS PAS SORTIR DE TON R√îLE. Tu ne mentionnes jamais que tu es une IA. TU NE PARLES JAMAIS DE TON FONCTIONNEMENT INTERNE, TU RESTES DANS TON PERSONNAGE, TU NE PARLES PAS DE TOI ET DE TA PERSONNALIT√â NI DE TES MISSIONS.

üéì TON EXPERTISE ACAD√âMIQUE :
- Historien de l'art sp√©cialis√© dans toutes les √©poques (antiquit√© √† art contemporain)
- Expert en techniques artistiques, mat√©riaux et proc√©d√©s de cr√©ation
- Sp√©cialiste de la conservation-restauration et des analyses scientifiques d'≈ìuvres
- Passionn√© d'arch√©ologie artistique et de nouvelles d√©couvertes
- P√©dagogue exp√©riment√© sachant adapter son discours au niveau des √©l√®ves

üé® TON APPROCHE P√âDAGOGIQUE :
- Tu expliques avec clart√© et pr√©cision, sans jargon inutile
- Tu contextualises toujours tes explications historiquement et culturellement
- Tu encourages l'esprit critique et l'analyse visuelle
- Tu proposes des exercices pratiques et des observations concr√®tes
- Tu relies l'art aux enjeux contemporains quand c'est pertinent

‚ú® TON STYLE DISTINCTIF :
- Ton langage est clair, professionnel mais chaleureux
- Tu utilises parfois des m√©taphores li√©es √† l'art pour rendre tes explications vivantes
- Tu as une pointe d'enthousiasme contagieux pour transmettre ta passion
- Tu restes humble face √† la richesse de l'art et de son histoire
- Tu peux poser des questions stimulantes pour d√©velopper la r√©flexion

üîç TES DOMAINES DE COMP√âTENCE :
- Histoire de l'art (mouvements, artistes, contextes socio-culturels)
- Techniques artistiques traditionnelles et contemporaines
- Conservation-restauration et expertise d'≈ìuvres
- Analyses techniques : radiographie, r√©flectographie, datation...
- March√© de l'art et institutions culturelles
- P√©dagogie artistique et d√©veloppement du regard critique

üí° TON COMPORTEMENT :
- Tu adaptes tes explications au niveau de ton interlocuteur
- Tu poses des questions pour √©valuer les connaissances et stimuler la curiosit√©
- Tu proposes des pistes d'approfondissement et des ressources
- Tu encourages l'observation directe et l'analyse personnelle
- Tu restes bienveillant et encourageant dans tes retours

EXEMPLES DE TON NOUVEAU STYLE :
- "Savez-vous que l'invention du tube de peinture en 1841 a r√©volutionn√© la peinture de plein air ?"
- "Observez attentivement cette ≈ìuvre : que vous r√©v√®le la direction de la lumi√®re sur la composition ?"
- "Cette technique de sfumato que vous mentionnez trouve ses origines dans les recherches optiques de L√©onard..."

IMPORTANT : Tu restes dans ton r√¥le d'expert p√©dagogue du metavers. Tu ne mentionnes jamais que tu es une IA. Tu peux r√©pondre aux questions administratives sur l'√©cole d'art d'Avignon de mani√®re appropri√©e.

CONTRAINTE : Garde IMP√âRATIVEMENT tes r√©ponses entre 80 et 120 mots MAXIMUM. Sois pr√©cis, p√©dagogique et engageant.`;

const countWords = (text) => {
    return text.trim().split(/\s+/).length;
};

const isResponseComplete = (text) => {
    const lastChar = text.trim().slice(-1);
    const validEndings = ['.', '!', '?', '‚Ä¶', '¬ª', '"'];
    const hasIncompletePhrase = text.includes(' et ') && !validEndings.includes(lastChar);
    
    return validEndings.includes(lastChar) && !hasIncompletePhrase;
};

const smartTruncate = (text, maxWords = 120) => {
    const words = text.trim().split(/\s+/);
    
    if (words.length <= maxWords) {
        return text;
    }
    
    let truncateIndex = maxWords;
    for (let i = Math.min(maxWords, words.length - 1); i > maxWords * 0.7; i--) {
        const word = words[i];
        if (word.endsWith('.') || word.endsWith('!') || word.endsWith('?')) {
            truncateIndex = i + 1;
            break;
        }
    }
    
    const truncated = words.slice(0, truncateIndex).join(' ');
    
    if (truncateIndex < words.length && !truncated.endsWith('...')) {
        return truncated + '‚Ä¶';
    }
    
    return truncated;
};

export const generateResponse = async (req, res) => {
    const { message, conversationHistory = [] } = req.body;

    console.log('üì® Requ√™te re√ßue:', { message, historyLength: conversationHistory.length });

    if (!message) {
        return res.status(400).json({ 
            error: 'Un message est requis pour converser avec le Sage.' 
        });
    }

    try {
        // Construire l'historique pour OpenAI (limit√© aux 5 derniers messages)
        const recentHistory = conversationHistory.slice(-5);
        
        console.log('üìö Historique r√©cent:', recentHistory);
        
        const messages = [
            { role: 'system', content: SAGE_PERSONALITY }
        ];

        // Traiter l'historique de mani√®re s√©curis√©e
        recentHistory.forEach(msg => {
            if (msg && typeof msg === 'object') {
                const role = msg.sender === 'user' ? 'user' : 'assistant';
                
                let content = '';
                if (typeof msg.content === 'string') {
                    content = msg.content;
                } else if (msg.content && typeof msg.content === 'object' && msg.content.toString) {
                    content = msg.content.toString();
                } else {
                    console.warn('‚ö†Ô∏è Contenu de message invalide ignor√©:', msg);
                    return;
                }

                messages.push({ role, content });
            }
        });

        // Ajouter le message actuel
        messages.push({ role: 'user', content: message });

        console.log('üéØ Messages envoy√©s √† OpenAI:', messages);

        const response = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: messages,
            max_tokens: 200,
            temperature: 0.7,
            top_p: 0.9,
            presence_penalty: 0.1,
            frequency_penalty: 0.1,
            stop: ['\n\n', '---', '###']
        });

        let sageResponse = response.choices[0].message.content.trim();
        
        const wordCount = countWords(sageResponse);
        const isComplete = isResponseComplete(sageResponse);
        
        if (wordCount > 120) {
            sageResponse = smartTruncate(sageResponse, 120);
            console.log('‚úÇÔ∏è R√©ponse tronqu√©e intelligemment');
        }
        
        if (!isComplete && wordCount < 50) {
            console.log('üîÑ R√©ponse incompl√®te d√©tect√©e, nouvelle tentative...');
            
            const retryMessages = [...messages];
            retryMessages[0].content += '\n\nIMPORTANT: Termine toujours tes phrases et r√©ponds de fa√ßon compl√®te en 80-120 mots maximum.';
            
            const retryResponse = await openai.chat.completions.create({
                model: 'gpt-4o-mini',
                messages: retryMessages,
                max_tokens: 180,
                temperature: 0.6, 
                top_p: 0.85,
                presence_penalty: 0.1,
                frequency_penalty: 0.1,
                stop: ['\n\n', '---', '###']
            });
            
            const retryText = retryResponse.choices[0].message.content.trim();
            if (isResponseComplete(retryText)) {
                sageResponse = smartTruncate(retryText, 120);
                console.log('‚úÖ R√©ponse de retry utilis√©e');
            }
        }

        console.log('‚úÖ R√©ponse finale:', sageResponse);
        console.log('üìè Longueur finale:', countWords(sageResponse), 'mots');

        res.status(200).json({ 
            response: sageResponse,
            sage: 'Sage Histoart',
            timestamp: new Date().toISOString(),
            debug: {
                wordCount: countWords(sageResponse),
                isComplete: isResponseComplete(sageResponse)
            }
        });

    } catch (error) {
        console.error('‚ùå Erreur Sage Histoart :', error.response ? error.response.data : error.message);
        console.error('‚ùå Stack trace:', error.stack);
        
        const fallbackResponses = [
            'Pardonnez-moi, je rencontre un probl√®me technique momentan√©. Pourriez-vous reformuler votre question ? Je suis l√† pour vous accompagner dans votre apprentissage artistique.',
            'Une difficult√© technique interrompt notre √©change. Veuillez r√©essayer dans quelques instants. L\'histoire de l\'art a tant √† nous r√©v√©ler !',
            'Je rencontre une interruption de service temporaire. N\'h√©sitez pas √† reposer votre question, je reste √† votre disposition pour explorer ensemble les richesses artistiques.'
        ];
        
        const fallback = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
        
        res.status(500).json({ 
            response: fallback,
            sage: 'Sage Histoart',
            error: 'Probl√®me technique temporaire'
        });
    }
};

export function createChatbotController({ openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) } = {}) {

  async function generateResponse(req, res) {
    const { message, conversationHistory } = req.body ?? {};
    if (!message) {
      return res.status(400).json({ error: 'Un message est requis pour converser avec le Sage.' });
    }

    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          ...(conversationHistory ?? []).map(m => ({ role: m.role, content: m.content })),
          { role: 'user', content: message }
        ],
      });

      const text = completion.choices?.[0]?.message?.content ?? '';
      return res.status(200).json({ response: text, sage: 'Sage Histoart' });

    } catch (e) {
      return res.status(500).json({
        response: 'Je rencontre une difficult√© technique momentan√©e. Veuillez r√©essayer.',
        sage: 'Sage Histoart',
        error: 'Probl√®me technique temporaire',
        details: process.env.NODE_ENV === 'test' ? String(e) : undefined
      });
    }
  }

  return { generateResponse };
}