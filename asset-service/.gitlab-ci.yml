# Variables globales
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: $CI_REGISTRY_IMAGE/asset-service
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  SERVICE_NAME: "asset-service"
  SERVICE_PORT: "4000"
  # Variables pour les tests
  NODE_ENV: test
  DB_NAME: asset_service_test
  DB_USER: test_user
  DB_PASSWORD: test_password
  DB_HOST: localhost

services:
  - docker:dind
  - postgres:14

stages:
  - install
  - quality
  - test
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

# ===================================
# JOBS EXÉCUTÉS SUR TOUTES LES BRANCHES
# ===================================

# Installation des dépendances
install_dependencies:
  image: node:18-alpine
  stage: install
  script:
    - echo "📦 Installation des dépendances..."
    - npm ci --cache .npm --prefer-offline
    - echo "✅ Dépendances installées"
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feat(ure)?\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^fix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^chore\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^refactor\/.*/

# Linting du code
lint:
  image: node:18-alpine
  stage: quality
  dependencies:
    - install_dependencies
  script:
    - echo "🔍 Lancement du linting..."
    - npm run lint
    - echo "✅ Code conforme aux standards"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feat(ure)?\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^fix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^chore\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^refactor\/.*/

# Audit de sécurité
security_audit:
  image: node:18-alpine
  stage: quality
  dependencies:
    - install_dependencies
  script:
    - echo "🔒 Audit de sécurité des dépendances..."
    - npm audit --audit-level=moderate || true
    - echo "✅ Audit de sécurité terminé"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feat(ure)?\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^fix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^chore\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^refactor\/.*/

# Tests unitaires
test_unit:
  image: node:18-alpine
  stage: test
  dependencies:
    - install_dependencies
  variables:
    POSTGRES_DB: $DB_NAME
    POSTGRES_USER: $DB_USER
    POSTGRES_PASSWORD: $DB_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - echo "🧪 Lancement des tests unitaires..."
    - npm run test:ci
    - echo "✅ Tests unitaires réussis"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: coverage/junit.xml
    paths:
      - coverage/
    expire_in: 1 week
  coverage: '/Lines\s*:\s*(\d+\.\d*)%/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feat(ure)?\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^fix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^chore\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^refactor\/.*/

# Tests d'intégration
test_integration:
  image: node:18-alpine
  stage: test
  dependencies:
    - install_dependencies
  services:
    - postgres:14
  variables:
    POSTGRES_DB: $DB_NAME
    POSTGRES_USER: $DB_USER
    POSTGRES_PASSWORD: $DB_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
  before_script:
    - apk add --no-cache postgresql-client
    - until pg_isready -h postgres -U $DB_USER; do sleep 1; done
    - createdb -h postgres -U $DB_USER $DB_NAME || true
  script:
    - echo "🔗 Lancement des tests d'intégration..."
    - npm run test -- --testPathPattern=integration
    - echo "✅ Tests d'intégration réussis"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH =~ /^feat(ure)?\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^fix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^chore\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^refactor\/.*/

# ===================================
# JOBS EXÉCUTÉS UNIQUEMENT SUR DEVELOP/MAIN
# ===================================

# Build des images Docker pour develop
build_dev:
  image: docker:latest
  stage: build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🔧 Construction de l'image de développement..."
    - docker build -f ./config/docker/Dockerfile.dev -t $IMAGE_NAME:$IMAGE_TAG-dev .
    - docker tag $IMAGE_NAME:$IMAGE_TAG-dev $IMAGE_NAME:dev-latest
    - docker push $IMAGE_NAME:$IMAGE_TAG-dev
    - docker push $IMAGE_NAME:dev-latest
    - echo "✅ Image DEV poussée => $IMAGE_NAME:$IMAGE_TAG-dev"
  dependencies:
    - test_unit
    - test_integration
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# Build des images Docker pour production
build_prod:
  image: docker:latest
  stage: build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🚀 Construction de l'image de production..."
    - docker build -f ./config/docker/Dockerfile.prod -t $IMAGE_NAME:$IMAGE_TAG .
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
    - echo "✅ Image PROD poussée => $IMAGE_NAME:$IMAGE_TAG"
  dependencies:
    - test_unit
    - test_integration
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# ===================================
# JOBS DE DÉPLOIEMENT
# ===================================

# Déploiement en staging
deploy_staging:
  image: alpine/helm:latest
  stage: deploy
  script:
    - echo "🚢 Déploiement en staging..."
    - echo "Service deployé avec l'image => $IMAGE_NAME:$IMAGE_TAG-dev"
  environment:
    name: staging
    url: https://staging-asset-service.example.com
  dependencies:
    - build_dev
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Déploiement en production
deploy_production:
  image: alpine/helm:latest
  stage: deploy
  script:
    - echo "🚀 Déploiement en production..."
    - echo "Service deployé avec l'image => $IMAGE_NAME:$IMAGE_TAG"
  environment:
    name: production
    url: https://asset-service.example.com
  dependencies:
    - build_prod
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual

# ===================================
# JOBS UTILITAIRES
# ===================================

# Nettoyage des anciennes images
cleanup:
  image: docker:latest
  stage: deploy
  script:
    - echo "🧹 Nettoyage des anciennes images..."
    - docker image prune -a --filter "until=720h" --force || true
    - echo "✅ Nettoyage terminé"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: manual

# Job de validation pour les merge requests
validate_mr:
  image: node:18-alpine
  stage: test
  dependencies:
    - install_dependencies
    - lint
    - test_unit
    - test_integration
    - security_audit
  script:
    - echo "✅ Validation de la merge request"
    - echo "- Linting ✅"
    - echo "- Tests unitaires ✅" 
    - echo "- Tests d'intégration ✅"
    - echo "- Audit de sécurité ✅"
    - echo "🎉 La merge request est prête à être mergée !"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"