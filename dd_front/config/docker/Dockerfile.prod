# Dockerfile.prod - Production Frontend React + Phaser.js - DigitalDrifter
# Multi-stage build: Build Node.js + Serve avec Nginx

# =============================================================================
# ARGUMENTS DE BUILD
# =============================================================================
ARG NODE_VERSION=20
ARG NGINX_VERSION=1.25-alpine
ARG BUILD_OUTPUT_DIR=dist

# =============================================================================
# STAGE 1: Dependencies & Build
# =============================================================================
FROM node:${NODE_VERSION}-alpine AS builder

# M√©tadonn√©es
LABEL maintainer="DigitalDrifter Team"
LABEL service="dd-front"
LABEL service.type="frontend"
LABEL description="Frontend Phaser.js pour DigitalDrifter"

# Installation des outils syst√®me pour le build
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copie des fichiers de d√©pendances (sans package-lock.json)
COPY package.json ./

# Installation des d√©pendances (sans package-lock.json)
RUN npm install --silent && \
    npm cache clean --force

# Copie du code source
COPY . .

# Arguments pour le build
ARG NODE_ENV=production
ARG GATEWAY_URL=http://localhost:8080
ARG BUILD_OUTPUT_DIR

# Configuration des variables d'environnement pour le build
ENV NODE_ENV=${NODE_ENV}
ENV GATEWAY_URL=${GATEWAY_URL}
ENV GENERATE_SOURCEMAP=false

# Build de l'application
RUN echo "üèóÔ∏è  Building frontend avec NODE_ENV=${NODE_ENV}" && \
    npm run build && \
    echo "‚úÖ Build termin√©" && \
    ls -la ${BUILD_OUTPUT_DIR}/

# Nettoyage des fichiers de d√©veloppement
RUN rm -rf node_modules src

# =============================================================================
# STAGE 2: Optimization (optionnel)
# =============================================================================
FROM alpine:latest AS optimizer

# Installation des outils d'optimisation
RUN apk add --no-cache \
    imagemagick \
    optipng \
    jpegoptim \
    && rm -rf /var/cache/apk/*

ARG BUILD_OUTPUT_DIR

# Copie des fichiers build√©s
COPY --from=builder /app/${BUILD_OUTPUT_DIR} /opt/app/

WORKDIR /opt/app

# Optimisation des assets
RUN echo "üéØ Optimisation des assets..." && \
    # Optimisation des PNG
    find . -name "*.png" -exec optipng -o2 {} \; 2>/dev/null || true && \
    # Optimisation des JPEG
    find . -name "*.jpg" -o -name "*.jpeg" -exec jpegoptim --strip-all --max=85 {} \; 2>/dev/null || true && \
    echo "‚úÖ Optimisation termin√©e"

# =============================================================================
# STAGE 3: Production Runtime avec Nginx
# =============================================================================
FROM nginx:${NGINX_VERSION} AS production

# Installation des outils syst√®me
RUN apk add --no-cache \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Arguments pour ce stage
ARG BUILD_OUTPUT_DIR=dist

# Copie des fichiers optimis√©s depuis le stage optimizer
COPY --from=optimizer /opt/app/ /usr/share/nginx/html/

# Copie des fichiers de configuration depuis le dossier conf/
COPY config/nginx/nginx.conf /etc/nginx/nginx.conf
COPY config/nginx/default.conf /etc/nginx/conf.d/default.conf

# Cr√©ation des dossiers de logs
RUN mkdir -p /var/log/nginx && \
    touch /var/log/nginx/access.log && \
    touch /var/log/nginx/error.log

# Variables d'environnement par d√©faut
ENV NODE_ENV=production
ENV GATEWAY_URL=http://gateway-service:8080

# Exposition du port
EXPOSE 3002

# Health check sp√©cialis√© pour frontend
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3002/health || exit 1

# Labels pour le monitoring
LABEL org.opencontainers.image.title="dd-front"
LABEL org.opencontainers.image.description="Frontend Phaser.js pour DigitalDrifter"
LABEL org.opencontainers.image.vendor="DigitalDrifter Team"
LABEL prometheus.io/scrape="false"

# Commande par d√©faut
CMD ["nginx", "-g", "daemon off;"]